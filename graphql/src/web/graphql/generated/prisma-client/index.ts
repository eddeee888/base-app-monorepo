// Code generated by Prisma (prisma@1.26.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  class: (where?: ClassWhereInput) => Promise<boolean>;
  classCategory: (where?: ClassCategoryWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  class: (where: ClassWhereUniqueInput) => ClassPromise;
  classes: (
    args?: {
      where?: ClassWhereInput;
      orderBy?: ClassOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Class>;
  classesConnection: (
    args?: {
      where?: ClassWhereInput;
      orderBy?: ClassOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ClassConnectionPromise;
  classCategory: (where: ClassCategoryWhereUniqueInput) => ClassCategoryPromise;
  classCategories: (
    args?: {
      where?: ClassCategoryWhereInput;
      orderBy?: ClassCategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ClassCategory>;
  classCategoriesConnection: (
    args?: {
      where?: ClassCategoryWhereInput;
      orderBy?: ClassCategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ClassCategoryConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createClass: (data: ClassCreateInput) => ClassPromise;
  updateClass: (
    args: { data: ClassUpdateInput; where: ClassWhereUniqueInput }
  ) => ClassPromise;
  updateManyClasses: (
    args: { data: ClassUpdateManyMutationInput; where?: ClassWhereInput }
  ) => BatchPayloadPromise;
  upsertClass: (
    args: {
      where: ClassWhereUniqueInput;
      create: ClassCreateInput;
      update: ClassUpdateInput;
    }
  ) => ClassPromise;
  deleteClass: (where: ClassWhereUniqueInput) => ClassPromise;
  deleteManyClasses: (where?: ClassWhereInput) => BatchPayloadPromise;
  createClassCategory: (data: ClassCategoryCreateInput) => ClassCategoryPromise;
  updateClassCategory: (
    args: {
      data: ClassCategoryUpdateInput;
      where: ClassCategoryWhereUniqueInput;
    }
  ) => ClassCategoryPromise;
  updateManyClassCategories: (
    args: {
      data: ClassCategoryUpdateManyMutationInput;
      where?: ClassCategoryWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertClassCategory: (
    args: {
      where: ClassCategoryWhereUniqueInput;
      create: ClassCategoryCreateInput;
      update: ClassCategoryUpdateInput;
    }
  ) => ClassCategoryPromise;
  deleteClassCategory: (
    where: ClassCategoryWhereUniqueInput
  ) => ClassCategoryPromise;
  deleteManyClassCategories: (
    where?: ClassCategoryWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  class: (
    where?: ClassSubscriptionWhereInput
  ) => ClassSubscriptionPayloadSubscription;
  classCategory: (
    where?: ClassCategorySubscriptionWhereInput
  ) => ClassCategorySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ClassOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ClassCategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "displayName_ASC"
  | "displayName_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "password_ASC"
  | "password_DESC"
  | "userGroup_ASC"
  | "userGroup_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpsertWithoutClassesInput {
  update: UserUpdateWithoutClassesDataInput;
  create: UserCreateWithoutClassesInput;
}

export type ClassWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ClassCategoryUpdateDataInput {
  name?: String;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  displayName?: String;
  displayName_not?: String;
  displayName_in?: String[] | String;
  displayName_not_in?: String[] | String;
  displayName_lt?: String;
  displayName_lte?: String;
  displayName_gt?: String;
  displayName_gte?: String;
  displayName_contains?: String;
  displayName_not_contains?: String;
  displayName_starts_with?: String;
  displayName_not_starts_with?: String;
  displayName_ends_with?: String;
  displayName_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  userGroup?: String;
  userGroup_not?: String;
  userGroup_in?: String[] | String;
  userGroup_not_in?: String[] | String;
  userGroup_lt?: String;
  userGroup_lte?: String;
  userGroup_gt?: String;
  userGroup_gte?: String;
  userGroup_contains?: String;
  userGroup_not_contains?: String;
  userGroup_starts_with?: String;
  userGroup_not_starts_with?: String;
  userGroup_ends_with?: String;
  userGroup_not_ends_with?: String;
  classes_every?: ClassWhereInput;
  classes_some?: ClassWhereInput;
  classes_none?: ClassWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ClassCategoryUpsertWithWhereUniqueNestedInput {
  where: ClassCategoryWhereUniqueInput;
  update: ClassCategoryUpdateDataInput;
  create: ClassCategoryCreateInput;
}

export interface ClassWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  creator?: UserWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  categories_every?: ClassCategoryWhereInput;
  categories_some?: ClassCategoryWhereInput;
  categories_none?: ClassCategoryWhereInput;
  AND?: ClassWhereInput[] | ClassWhereInput;
  OR?: ClassWhereInput[] | ClassWhereInput;
  NOT?: ClassWhereInput[] | ClassWhereInput;
}

export interface UserCreateOneWithoutClassesInput {
  create?: UserCreateWithoutClassesInput;
  connect?: UserWhereUniqueInput;
}

export interface ClassCategoryUpdateInput {
  name?: String;
}

export interface UserCreateWithoutClassesInput {
  email: String;
  displayName?: String;
  firstName: String;
  lastName: String;
  password: String;
  userGroup?: String;
}

export interface ClassCategoryScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: ClassCategoryScalarWhereInput[] | ClassCategoryScalarWhereInput;
  OR?: ClassCategoryScalarWhereInput[] | ClassCategoryScalarWhereInput;
  NOT?: ClassCategoryScalarWhereInput[] | ClassCategoryScalarWhereInput;
}

export interface ClassCategoryCreateManyInput {
  create?: ClassCategoryCreateInput[] | ClassCategoryCreateInput;
  connect?: ClassCategoryWhereUniqueInput[] | ClassCategoryWhereUniqueInput;
}

export interface ClassCategorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ClassCategoryWhereInput;
  AND?:
    | ClassCategorySubscriptionWhereInput[]
    | ClassCategorySubscriptionWhereInput;
  OR?:
    | ClassCategorySubscriptionWhereInput[]
    | ClassCategorySubscriptionWhereInput;
  NOT?:
    | ClassCategorySubscriptionWhereInput[]
    | ClassCategorySubscriptionWhereInput;
}

export interface ClassCategoryCreateInput {
  name: String;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  displayName?: String;
  firstName?: String;
  lastName?: String;
  password?: String;
  userGroup?: String;
}

export interface ClassUpdateInput {
  creator?: UserUpdateOneRequiredWithoutClassesInput;
  name?: String;
  description?: String;
  categories?: ClassCategoryUpdateManyInput;
}

export type ClassCategoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateOneRequiredWithoutClassesInput {
  create?: UserCreateWithoutClassesInput;
  update?: UserUpdateWithoutClassesDataInput;
  upsert?: UserUpsertWithoutClassesInput;
  connect?: UserWhereUniqueInput;
}

export interface ClassScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: ClassScalarWhereInput[] | ClassScalarWhereInput;
  OR?: ClassScalarWhereInput[] | ClassScalarWhereInput;
  NOT?: ClassScalarWhereInput[] | ClassScalarWhereInput;
}

export interface UserUpdateWithoutClassesDataInput {
  email?: String;
  displayName?: String;
  firstName?: String;
  lastName?: String;
  password?: String;
  userGroup?: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface ClassCreateWithoutCreatorInput {
  name: String;
  description: String;
  categories?: ClassCategoryCreateManyInput;
}

export interface ClassUpdateWithWhereUniqueWithoutCreatorInput {
  where: ClassWhereUniqueInput;
  data: ClassUpdateWithoutCreatorDataInput;
}

export interface ClassCategoryUpdateManyInput {
  create?: ClassCategoryCreateInput[] | ClassCategoryCreateInput;
  update?:
    | ClassCategoryUpdateWithWhereUniqueNestedInput[]
    | ClassCategoryUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ClassCategoryUpsertWithWhereUniqueNestedInput[]
    | ClassCategoryUpsertWithWhereUniqueNestedInput;
  delete?: ClassCategoryWhereUniqueInput[] | ClassCategoryWhereUniqueInput;
  connect?: ClassCategoryWhereUniqueInput[] | ClassCategoryWhereUniqueInput;
  set?: ClassCategoryWhereUniqueInput[] | ClassCategoryWhereUniqueInput;
  disconnect?: ClassCategoryWhereUniqueInput[] | ClassCategoryWhereUniqueInput;
  deleteMany?: ClassCategoryScalarWhereInput[] | ClassCategoryScalarWhereInput;
  updateMany?:
    | ClassCategoryUpdateManyWithWhereNestedInput[]
    | ClassCategoryUpdateManyWithWhereNestedInput;
}

export interface UserUpdateInput {
  email?: String;
  displayName?: String;
  firstName?: String;
  lastName?: String;
  password?: String;
  userGroup?: String;
  classes?: ClassUpdateManyWithoutCreatorInput;
}

export interface ClassCategoryUpdateWithWhereUniqueNestedInput {
  where: ClassCategoryWhereUniqueInput;
  data: ClassCategoryUpdateDataInput;
}

export interface ClassCreateInput {
  creator: UserCreateOneWithoutClassesInput;
  name: String;
  description: String;
  categories?: ClassCategoryCreateManyInput;
}

export interface ClassCategoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: ClassCategoryWhereInput[] | ClassCategoryWhereInput;
  OR?: ClassCategoryWhereInput[] | ClassCategoryWhereInput;
  NOT?: ClassCategoryWhereInput[] | ClassCategoryWhereInput;
}

export interface ClassSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ClassWhereInput;
  AND?: ClassSubscriptionWhereInput[] | ClassSubscriptionWhereInput;
  OR?: ClassSubscriptionWhereInput[] | ClassSubscriptionWhereInput;
  NOT?: ClassSubscriptionWhereInput[] | ClassSubscriptionWhereInput;
}

export interface ClassCreateManyWithoutCreatorInput {
  create?: ClassCreateWithoutCreatorInput[] | ClassCreateWithoutCreatorInput;
  connect?: ClassWhereUniqueInput[] | ClassWhereUniqueInput;
}

export interface ClassUpdateManyWithWhereNestedInput {
  where: ClassScalarWhereInput;
  data: ClassUpdateManyDataInput;
}

export interface UserCreateInput {
  email: String;
  displayName?: String;
  firstName: String;
  lastName: String;
  password: String;
  userGroup?: String;
  classes?: ClassCreateManyWithoutCreatorInput;
}

export interface ClassUpdateWithoutCreatorDataInput {
  name?: String;
  description?: String;
  categories?: ClassCategoryUpdateManyInput;
}

export interface ClassCategoryUpdateManyMutationInput {
  name?: String;
}

export interface ClassUpdateManyMutationInput {
  name?: String;
  description?: String;
}

export interface ClassCategoryUpdateManyDataInput {
  name?: String;
}

export interface ClassCategoryUpdateManyWithWhereNestedInput {
  where: ClassCategoryScalarWhereInput;
  data: ClassCategoryUpdateManyDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ClassUpdateManyWithoutCreatorInput {
  create?: ClassCreateWithoutCreatorInput[] | ClassCreateWithoutCreatorInput;
  delete?: ClassWhereUniqueInput[] | ClassWhereUniqueInput;
  connect?: ClassWhereUniqueInput[] | ClassWhereUniqueInput;
  set?: ClassWhereUniqueInput[] | ClassWhereUniqueInput;
  disconnect?: ClassWhereUniqueInput[] | ClassWhereUniqueInput;
  update?:
    | ClassUpdateWithWhereUniqueWithoutCreatorInput[]
    | ClassUpdateWithWhereUniqueWithoutCreatorInput;
  upsert?:
    | ClassUpsertWithWhereUniqueWithoutCreatorInput[]
    | ClassUpsertWithWhereUniqueWithoutCreatorInput;
  deleteMany?: ClassScalarWhereInput[] | ClassScalarWhereInput;
  updateMany?:
    | ClassUpdateManyWithWhereNestedInput[]
    | ClassUpdateManyWithWhereNestedInput;
}

export interface ClassUpsertWithWhereUniqueWithoutCreatorInput {
  where: ClassWhereUniqueInput;
  update: ClassUpdateWithoutCreatorDataInput;
  create: ClassCreateWithoutCreatorInput;
}

export interface ClassUpdateManyDataInput {
  name?: String;
  description?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  displayName?: String;
  firstName: String;
  lastName: String;
  password: String;
  userGroup?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  displayName: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  userGroup: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  displayName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  userGroup: () => Promise<AsyncIterator<String>>;
}

export interface ClassCategoryEdge {
  node: ClassCategory;
  cursor: String;
}

export interface ClassCategoryEdgePromise
  extends Promise<ClassCategoryEdge>,
    Fragmentable {
  node: <T = ClassCategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClassCategoryEdgeSubscription
  extends Promise<AsyncIterator<ClassCategoryEdge>>,
    Fragmentable {
  node: <T = ClassCategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ClassCategorySubscriptionPayload {
  mutation: MutationType;
  node: ClassCategory;
  updatedFields: String[];
  previousValues: ClassCategoryPreviousValues;
}

export interface ClassCategorySubscriptionPayloadPromise
  extends Promise<ClassCategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClassCategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClassCategoryPreviousValuesPromise>() => T;
}

export interface ClassCategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClassCategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClassCategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClassCategoryPreviousValuesSubscription>() => T;
}

export interface ClassCategoryConnection {
  pageInfo: PageInfo;
  edges: ClassCategoryEdge[];
}

export interface ClassCategoryConnectionPromise
  extends Promise<ClassCategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClassCategoryEdge>>() => T;
  aggregate: <T = AggregateClassCategoryPromise>() => T;
}

export interface ClassCategoryConnectionSubscription
  extends Promise<AsyncIterator<ClassCategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClassCategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClassCategorySubscription>() => T;
}

export interface AggregateClass {
  count: Int;
}

export interface AggregateClassPromise
  extends Promise<AggregateClass>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClassSubscription
  extends Promise<AsyncIterator<AggregateClass>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ClassEdge {
  node: Class;
  cursor: String;
}

export interface ClassEdgePromise extends Promise<ClassEdge>, Fragmentable {
  node: <T = ClassPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClassEdgeSubscription
  extends Promise<AsyncIterator<ClassEdge>>,
    Fragmentable {
  node: <T = ClassSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClassCategoryPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ClassCategoryPreviousValuesPromise
  extends Promise<ClassCategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ClassCategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<ClassCategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateClassCategory {
  count: Int;
}

export interface AggregateClassCategoryPromise
  extends Promise<AggregateClassCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClassCategorySubscription
  extends Promise<AsyncIterator<AggregateClassCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ClassPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
}

export interface ClassPreviousValuesPromise
  extends Promise<ClassPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ClassPreviousValuesSubscription
  extends Promise<AsyncIterator<ClassPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface ClassSubscriptionPayload {
  mutation: MutationType;
  node: Class;
  updatedFields: String[];
  previousValues: ClassPreviousValues;
}

export interface ClassSubscriptionPayloadPromise
  extends Promise<ClassSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClassPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClassPreviousValuesPromise>() => T;
}

export interface ClassSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClassSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClassSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClassPreviousValuesSubscription>() => T;
}

export interface Class {
  id: ID_Output;
  name: String;
  description: String;
}

export interface ClassPromise extends Promise<Class>, Fragmentable {
  id: () => Promise<ID_Output>;
  creator: <T = UserPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  categories: <T = FragmentableArray<ClassCategory>>(
    args?: {
      where?: ClassCategoryWhereInput;
      orderBy?: ClassCategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ClassSubscription
  extends Promise<AsyncIterator<Class>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  creator: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  categories: <T = Promise<AsyncIterator<ClassCategorySubscription>>>(
    args?: {
      where?: ClassCategoryWhereInput;
      orderBy?: ClassCategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ClassCategory {
  id: ID_Output;
  name: String;
}

export interface ClassCategoryPromise
  extends Promise<ClassCategory>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ClassCategorySubscription
  extends Promise<AsyncIterator<ClassCategory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  email: String;
  displayName?: String;
  firstName: String;
  lastName: String;
  password: String;
  userGroup?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  displayName: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  userGroup: () => Promise<String>;
  classes: <T = FragmentableArray<Class>>(
    args?: {
      where?: ClassWhereInput;
      orderBy?: ClassOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  displayName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  userGroup: () => Promise<AsyncIterator<String>>;
  classes: <T = Promise<AsyncIterator<ClassSubscription>>>(
    args?: {
      where?: ClassWhereInput;
      orderBy?: ClassOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ClassConnection {
  pageInfo: PageInfo;
  edges: ClassEdge[];
}

export interface ClassConnectionPromise
  extends Promise<ClassConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClassEdge>>() => T;
  aggregate: <T = AggregateClassPromise>() => T;
}

export interface ClassConnectionSubscription
  extends Promise<AsyncIterator<ClassConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClassEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClassSubscription>() => T;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Class",
    embedded: false
  },
  {
    name: "ClassCategory",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`
});
export const prisma = new Prisma();
