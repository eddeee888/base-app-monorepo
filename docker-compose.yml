version: "3.7"

services:
  client:
    build:
      context: ./services/client
      target: base
    command: yarn start --host # Ensure Vite dev server can take Docker traffic with --host flag
    environment:
      DEV_SERVER_PORT: ${CLIENT_PORT}
      CI: "true" # Ensure Vite dev server do not immediately send 0 status in container
    volumes:
      - ./services/client/src:/usr/src/app/src
      - ./services/client/package.json:/usr/src/app/package.json
      - ./services/client/vite.config.ts:/usr/src/app/vite.config.ts
      - ./services/client/tsconfig.json:/usr/src/app/tsconfig.json
      - ./services/client/index.html:/usr/src/app/index.html
    networks:
      - vm

  client-seo:
    build:
      context: ./services/client-seo
      target: base
    command: yarn dev -p ${CLIENT_SEO_PORT}
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_WEBSOCKET_GRAPHQL_ENDPOINT: ${WEBSOCKET_GRAPHQL_ENDPOINT}
      NEXT_PUBLIC_GRAPHQL_ENDPOINT: ${GRAPHQL_ENDPOINT}
      NEXT_PUBLIC_GRAPHQL_ENDPOINT_SSR: ${GRAPHQL_ENDPOINT_SSR}
      NEXT_PUBLIC_APP_NAME: ${APP_NAME}
      NEXT_PUBLIC_APP_ORIGIN: ${APP_ORIGIN}
      # NEXT_PUBLIC_SPECIAL_MODE: "maintenance"
      NODE_ICU_DATA: /usr/src/app/node_modules/full-icu # TODO:HACK to get full-icu in nodejs 12
    volumes:
      - ./services/client-seo/public:/usr/src/app/public
      - ./services/client-seo/src:/usr/src/app/src
      - ./services/client-seo/package.json:/usr/src/app/package.json
      - ./services/client-seo/next.config.js:/usr/src/app/next.config.js
      - ./services/client-seo/tsconfig.json:/usr/src/app/tsconfig.json
      - ./services/client-seo/.next:/usr/src/app/.next
    networks:
      - vm

  server:
    build:
      context: ./services/server
      target: base
    command: yarn start:app
    environment:
      APP_ORIGIN: ${APP_ORIGIN}
      PRIMARY_DOMAIN: ${PRIMARY_DOMAIN}
      CLIENT_SEO_SERVICE_DOMAIN: ${CLIENT_SEO_SERVICE_DOMAIN}
      CLIENT_SERVICE_DOMAIN: ${CLIENT_SERVICE_DOMAIN}
      GRAPHQL_ENDPOINT: ${GRAPHQL_ENDPOINT}
      PORT: ${SERVER_PORT}
      JWT_SECRET: ${JWT_SECRET}
      PRISMA_DATABASE_URL: ${PRISMA_DATABASE_URL}
      SERVER_DATABASE_NAME: ${SERVER_DATABASE_NAME}
    volumes:
      - ./services/server/src:/usr/src/app/src
      - ./services/server/prisma:/usr/src/app/prisma
      - ./services/server/scripts:/usr/src/app/scripts
      - ./services/server/package.json:/usr/src/app/package.json
    networks:
      - vm

  server-worker:
    build:
      context: ./services/server
      target: base
    command: yarn start:crons
    environment:
      PRISMA_DATABASE_URL: ${PRISMA_DATABASE_URL}
      NODE_ICU_DATA: /usr/src/app/node_modules/full-icu # TODO:HACK to get full-icu in nodejs 12
    volumes:
      - ./services/server/src:/usr/src/app/src
      - ./services/server/prisma:/usr/src/app/prisma
      - ./services/server/package.json:/usr/src/app/package.json
    networks:
      - vm

  # Set up load balancer container
  reverse-proxy:
    build:
      context: ./services/reverse-proxy
    tty: true
    environment:
      CLIENT_SERVICE_NAME: ${CLIENT_SERVICE_NAME}
      CLIENT_PORT: ${CLIENT_PORT}
      CLIENT_SEO_SERVICE_NAME: ${CLIENT_SEO_SERVICE_NAME}
      CLIENT_SEO_PORT: ${CLIENT_SEO_PORT}
      SERVER_SERVICE_NAME: ${SERVER_SERVICE_NAME}
      SERVER_PORT: ${SERVER_PORT}
      CLIENT_SERVICE_DOMAIN: ${CLIENT_SERVICE_DOMAIN}
      CLIENT_SEO_SERVICE_DOMAIN: ${CLIENT_SEO_SERVICE_DOMAIN}
      SERVER_SERVICE_DOMAIN: ${SERVER_SERVICE_DOMAIN}
    ports:
      - 80:80
      - 443:443
      - 41001:41001 # HACK: get around Vite dev server HMR traffic clientPort bug: https://github.com/vitejs/vite/issues/3737
    depends_on:
      - client
      - client-seo
      - server
    networks:
      vm:
        aliases:
          - ${CLIENT_SEO_SERVICE_DOMAIN}

  # Set up database server
  database:
    image: mysql:5.7
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_PORT=${MYSQL_PORT}
    volumes:
      - database:/var/lib/mysql
    expose:
      - ${MYSQL_PORT}
    ports:
      - ${MYSQL_PORT}:${MYSQL_PORT}
    networks:
      - vm

volumes:
  database:

networks:
  vm:
