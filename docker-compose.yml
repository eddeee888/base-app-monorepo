version: "3.7"

services:
  # Set up client container
  client:
    build:
      context: ./client
      target: base
    command: yarn start
    ports:
      - ${CLIENT_PORT}:${CLIENT_PORT}
    environment:
      PORT: ${CLIENT_PORT}
      REACT_APP_GRAPHQL_ENDPOINT: ${GRAPHQL_ENDPOINT}
      REACT_APP_SERVER_NAME: ${SERVER_NAME}
      CHOKIDAR_USEPOLLING: "true"
      CHOKIDAR_INTERVAL: 5000
      TSC_WATCHFILE: "UseFsEventsWithFallbackDynamicPolling"
    volumes:
      - ./client/src:/usr/src/app/src
      - ./client/package.json:/usr/src/app/package.json
    networks:
      - com_vm

  client-seo:
    build:
      context: ./client-seo
      target: base
    command: yarn dev -p ${CLIENT_SEO_PORT}
    ports:
      - ${CLIENT_SEO_PORT}:${CLIENT_SEO_PORT}
    environment:
      PORT: ${CLIENT_SEO_PORT}
      GRAPHQL_ENDPOINT: ${GRAPHQL_ENDPOINT}
    volumes:
      - ./client-seo/src:/usr/src/app/src
      - ./client-seo/package.json:/usr/src/app/package.json
      - ./client-seo/.next:/usr/src/app/.next
    networks:
      - com_vm

  # Set up server container
  server:
    build:
      context: ./server
      target: base
    command: yarn start
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    environment:
      PRISMA_ENDPOINT: ${PRISMA_ENDPOINT}
      PRISMA_SECRET: ${PRISMA_SECRET}
      SERVER_NAME: ${SERVER_NAME}
      GRAPHQL_ENDPOINT: ${GRAPHQL_ENDPOINT}
      JWT_SECRET: ${JWT_SECRET}
      PORT: ${SERVER_PORT}
      AWS_S3_IMAGES_GET_SIGNED_URL: ${AWS_S3_IMAGES_GET_SIGNED_URL}
      AWS_S3_IMAGES_FOLDER_URL: ${AWS_S3_IMAGES_FOLDER_URL}
      AWS_S3_IMAGES_GET_SIGNED_URL_API_KEY: ${AWS_S3_IMAGES_GET_SIGNED_URL_API_KEY}
    volumes:
      - ./server/src:/usr/src/app/src
      - ./server/package.json:/usr/src/app/package.json
    depends_on:
      - prisma
    networks:
      - com_vm

  # Set up server worker
  server-worker:
    build:
      context: ./server
      target: base
    command: yarn start:crons
    environment:
      PRISMA_ENDPOINT: ${PRISMA_ENDPOINT}
      PRISMA_SECRET: ${PRISMA_SECRET}
    volumes:
      - ./server/src:/usr/src/app/src
      - ./server/package.json:/usr/src/app/package.json
    depends_on:
      - prisma

  # Set up load balancer container
  reverse-proxy:
    build:
      context: ./reverse-proxy
    tty: true
    environment:
      MAIN_SERVER_NAME: ${MAIN_SERVER_NAME}
      CLIENT_SERVICE_NAME: ${CLIENT_SERVICE_NAME}
      CLIENT_PORT: ${CLIENT_PORT}
      CLIENT_URL_PATH: ${CLIENT_URL_PATH}
      CLIENT_STATIC_URL_PATH: ${CLIENT_STATIC_URL_PATH}
      CLIENT_MANIFEST_URL_PATH: ${CLIENT_MANIFEST_URL_PATH}
      CLIENT_SEO_SERVICE_NAME: ${CLIENT_SEO_SERVICE_NAME}
      CLIENT_SEO_PORT: ${CLIENT_SEO_PORT}
      HOMEPAGE_URL_PATH: ${HOMEPAGE_URL_PATH}
      SERVER_SERVICE_NAME: ${SERVER_SERVICE_NAME}
      SERVER_PORT: ${SERVER_PORT}
      GRAPHQL_URL_PATH: ${GRAPHQL_URL_PATH}
    ports:
      - 80:80
      - 443:443
    depends_on:
      - client
      - client-seo
      - server
    networks:
      com_vm:
        aliases:
          - ${MAIN_SERVER_NAME}

  # Set up database server
  database:
    image: mysql:5.7
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_PORT=${MYSQL_PORT}
    volumes:
      - database:/var/lib/mysql
    expose:
      - ${MYSQL_PORT}
    ports:
      - ${MYSQL_PORT}:${MYSQL_PORT}
    networks:
      - com_vm

  # Set up prisma client
  prisma:
    image: prismagraphql/prisma:1.34
    restart: always
    ports:
      - ${PRISMA_PORT}:${PRISMA_PORT}
    environment:
      PRISMA_CONFIG: |
        port: ${PRISMA_PORT}
        managementApiSecret: ${PRISMA_SECRET}
        databases:
          default:
            connector: mysql
            host: ${DATABASE_SERVICE_NAME}
            port: ${MYSQL_PORT}
            user: root
            password: ${MYSQL_ROOT_PASSWORD}
            migrations: true
    depends_on:
      - database
    networks:
      - com_vm

volumes:
  database:

networks:
  com_vm:
