#!/bin/bash

CURRENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
source $CURRENT_DIR/utils/constants.sh
source $CURRENT_DIR/utils/error_exit.sh

function remove_stoppped_container(){
  if [ "$(docker ps -aq -f status=exited -f name=$DNS_CONTAINER_NAME)" ]; then
    docker rm $DNS_CONTAINER_NAME &> /dev/null || error_exit "Unable to remove $DNS_CONTAINER_NAME container"
  fi
}

# This spins up a dnsmasq container so we don't have to manually update host files
function set_up_dnsmasq {
  remove_stoppped_container

  if [ "$(docker ps -q -f name=$DNS_CONTAINER_NAME)" ]; then
    docker stop $DNS_CONTAINER_NAME &> /dev/null || error_exit "Unable to stop $DNS_CONTAINER_NAME container"
    remove_stoppped_container
  fi

  # create the dnsmasq container
  docker pull 4km3/dnsmasq &> /dev/null || error_exit "Unable to pull dnsmasq"
  docker run -d --name $DNS_CONTAINER_NAME -p $DNS_PORT:53/tcp -p $DNS_PORT:53/udp --cap-add=NET_ADMIN 4km3/dnsmasq:latest --address=/$TOP_LEVEL_DOMAIN/127.0.0.1 &> /dev/null || error_exit "Unable to create $DNS_CONTAINER_NAME"

  docker ps -f name=$DNS_CONTAINER_NAME
  echo ""
  echo "---"
}

function create_resolver_file {
  echo "*** Checking resolver file..."
  echo ""

  # Make the directory
  if [ ! -e $RESOLVER_DIR ]; then 
    sudo mkdir -p $RESOLVER_DIR || error_exit "Unable to create $RESOLVER_DIR"
    echo "Created new directory $RESOLVER_DIR"
    echo ""
  fi

  if [ -e $RESOLVER_FILE ]; then 
    echo "-> Removing old resolver file $RESOLVER_FILE ..."
    sudo rm $RESOLVER_FILE
    echo ""
  fi
  

  echo "-> Creating new resolver file $RESOLVER_FILE ..."
  sudo sh -c "echo '# This is auto-generated. Do NOT edit this file\nnameserver 127.0.0.1 \nport $DNS_PORT' >> $RESOLVER_FILE" || error_exit "Unable to create $RESOLVER_FILE"  
  echo "Resolver created: $RESOLVER_FILE"
  echo ""
  echo "---"
}

set_up_dnsmasq
create_resolver_file